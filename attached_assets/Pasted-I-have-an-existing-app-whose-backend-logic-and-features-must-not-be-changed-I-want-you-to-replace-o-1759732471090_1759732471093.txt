I have an existing app whose backend logic and features must not be changed. I want you to replace or rebuild only the frontend with a modern React frontend that adds live, fluid, production-quality animations and improves UX while preserving all existing functions and API endpoints.

Project constraints

Keep all existing backend logic, endpoints, and data flows exactly as-is. Only change the frontend.

Use React (v18+) with functional components and hooks.

Use Tailwind CSS for layout and basics.

Use these animation libraries (choose a combination across components): Framer Motion (primary), lottie-react (for micro-animations), and GSAP or React Spring when Framer Motion can’t achieve the effect. Avoid unnecessary new dependencies.

The code should be modular, typed with TypeScript (if the project does not allow TS, produce JS but keep types in comments).

Provide accessible components (keyboard focus, aria labels).

Add a small animation utility module so animation props are reusable.

Key UI/animation features to implement

Floating glowing card with rotating neon aura

Component: <GlowingCard />

Behavior: subtle vertical float (y-axis), soft neon gradient aura that slowly rotates around the card, and a faint pulsing glow. The effect should be GPU-accelerated (use transform/opacity).

Props: title, children, cta (button), accentColor.

When hovered: scale to 1.03, increase glow, slightly increase rotation speed.

Live data animations / “live” indicator

Component: <LiveBadge /> or inline live indicator on cards.

Behavior: animated pulse + ripple when new data arrives; smooth crossfade for updated metric numbers; animate numeric counters (incrementing) when value changes.

Use react-use or a custom hook to detect incoming data and trigger animations.

Icon hover micro-interactions

Small hover/press animations for icons: subtle pop, rotate or color shift; keyboard accessible (focus visible).

Animated toasts + success micro-animation

Use react-hot-toast or a small custom toast system integrated with Lottie for success checkmarks.

Toasts should animate in from bottom-right with spring motion and dismiss with a smooth exit animation.

Page transitions + route-aware animations

Use Framer Motion <AnimatePresence> with fade/slide transitions between pages. Ensure exit animations complete before mount.

Live terminal / activity feed

Component: <LiveFeed /> that streams new lines and animates insertion (slide-up + fade). Add “auto-scroll” toggle; when user has scrolled up, pause auto-scroll and show a subtle “jump to newest” indicator that pulses.

Progress loaders & skeletons

Global skeleton system for slow responses; progress bar at top (like NProgress) that animates smoothly.

UX & performance

Use will-change, transform, and opacity only. Avoid layout-thrashing animations.

Provide a performance mode toggle (reduce-motion for accessibility).

Use requestAnimationFrame where needed or let the animation library optimize.