from fastapi import APIRouter, HTTPException, Depends
import requests
from typing import List, Optional

from routers.auth import verify_token
from utils.database import get_db_connection

router = APIRouter()

@router.get("/search")
async def search_exploits(
    query: str,
    exploit_type: Optional[str] = None,
    platform: Optional[str] = None,
    limit: int = 50,
    user_data: dict = Depends(verify_token)
):
    local_exploits = search_local_exploits(query, exploit_type, platform, limit)
    
    if len(local_exploits) < limit:
        online_exploits = search_online_exploits(query, limit - len(local_exploits))
        local_exploits.extend(online_exploits)
    
    return {"exploits": local_exploits[:limit]}

@router.get("/details/{exploit_id}")
async def get_exploit_details(
    exploit_id: str,
    user_data: dict = Depends(verify_token)
):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM exploits WHERE exploit_id = ?", (exploit_id,))
        result = cursor.fetchone()
        
        if not result:
            raise HTTPException(status_code=404, detail="Exploit not found")
        
        return dict(result)

def search_local_exploits(query: str, exploit_type: Optional[str], platform: Optional[str], limit: int):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        sql = "SELECT * FROM exploits WHERE title LIKE ? OR description LIKE ?"
        params = [f"%{query}%", f"%{query}%"]
        
        if exploit_type:
            sql += " AND type = ?"
            params.append(exploit_type)
        
        if platform:
            sql += " AND platform LIKE ?"
            params.append(f"%{platform}%")
        
        sql += " ORDER BY date_published DESC LIMIT ?"
        params.append(limit)
        
        cursor.execute(sql, params)
        results = cursor.fetchall()
        
        return [dict(result) for result in results]

def search_online_exploits(query: str, limit: int):
    exploits = []
    
    try:
        nvd_exploits = search_nvd_exploits(query, limit)
        exploits.extend(nvd_exploits)
    except Exception:
        pass
    
    return exploits[:limit]

def search_nvd_exploits(query: str, limit: int):
    exploits = []
    
    try:
        nvd_api = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        params = {
            "keywordSearch": query,
            "resultsPerPage": min(limit, 20)
        }
        
        response = requests.get(nvd_api, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        for cve_item in data.get('vulnerabilities', [])[:limit]:
            cve = cve_item.get('cve', {})
            cve_id = cve.get('id', 'Unknown')
            
            descriptions = cve.get('descriptions', [])
            description = descriptions[0].get('value', 'No description') if descriptions else 'No description'
            
            exploits.append({
                "exploit_id": cve_id,
                "title": f"CVE Vulnerability: {cve_id}",
                "description": description[:500],
                "type": "cve",
                "platform": "multiple",
                "date_published": cve.get('published', '')[:10],
                "author": "NIST NVD",
                "verified": True
            })
    
    except Exception:
        pass
    
    return exploits
