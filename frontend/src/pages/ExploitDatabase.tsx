import { useState } from 'react'
import { motion } from 'framer-motion'
import { exploitsAPI } from '@/services/api'
import { showToast } from '@/components/ToastSystem'
import { GlowingCard } from '@/components/GlowingCard'
import { Skeleton } from '@/components/ProgressLoader'
import { staggerContainer, staggerItem, scaleIn } from '@/utils/animations'

export default function ExploitDatabase() {
  const [query, setQuery] = useState('')
  const [exploitType, setExploitType] = useState('')
  const [platform, setPlatform] = useState('')
  const [results, setResults] = useState<any[]>([])
  const [isSearching, setIsSearching] = useState(false)

  const handleSearch = async () => {
    if (!query.trim()) {
      showToast.error('Please enter a search query')
      return
    }

    setIsSearching(true)
    try {
      const response = await exploitsAPI.search(query, exploitType, platform)
      setResults(response.data.exploits || [])
      showToast.success(`Found ${response.data.exploits?.length || 0} exploits`)
    } catch (error: any) {
      showToast.error(error.response?.data?.detail || 'Search failed')
    } finally {
      setIsSearching(false)
    }
  }

  return (
    <motion.div
      variants={staggerContainer}
      initial="hidden"
      animate="visible"
      className="space-y-8"
    >
      <motion.div variants={staggerItem}>
        <h1 className="text-4xl font-bold text-white mb-2">Exploit Database</h1>
        <p className="text-gray-400">Search for known exploits and proof-of-concept code</p>
      </motion.div>

      <motion.div variants={staggerItem}>
        <GlowingCard title="Search Exploits" accentColor="red">
          <div className="space-y-4">
            <input
              type="text"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
              placeholder="Search for exploits..."
              className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-red-500 text-white"
            />

            <div className="grid grid-cols-2 gap-4">
              <select
                value={exploitType}
                onChange={(e) => setExploitType(e.target.value)}
                className="px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-red-500 text-white"
              >
                <option value="">All Types</option>
                <option value="remote">Remote</option>
                <option value="local">Local</option>
                <option value="webapps">Web Apps</option>
                <option value="dos">DoS</option>
              </select>

              <select
                value={platform}
                onChange={(e) => setPlatform(e.target.value)}
                className="px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-red-500 text-white"
              >
                <option value="">All Platforms</option>
                <option value="windows">Windows</option>
                <option value="linux">Linux</option>
                <option value="macos">macOS</option>
                <option value="multiple">Multiple</option>
              </select>
            </div>

            <motion.button
              onClick={handleSearch}
              disabled={isSearching}
              className="w-full py-3 bg-gradient-to-r from-red-600 to-orange-600 text-white font-semibold rounded-lg disabled:opacity-50"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              {isSearching ? 'Searching...' : 'Search Exploits'}
            </motion.button>
          </div>
        </GlowingCard>
      </motion.div>

      {isSearching && (
        <div className="space-y-4">
          {[1, 2, 3].map((i) => (
            <Skeleton key={i} className="h-32" />
          ))}
        </div>
      )}

      {!isSearching && results.length > 0 && (
        <motion.div variants={staggerContainer} className="space-y-4">
          {results.map((exploit: any, idx: number) => (
            <motion.div
              key={idx}
              variants={scaleIn}
              initial="hidden"
              animate="visible"
              transition={{ delay: idx * 0.05 }}
            >
              <div className="p-6 bg-gray-900/50 rounded-lg border border-gray-800 hover:border-red-500 transition-colors">
                <h3 className="text-xl font-bold text-red-400 mb-2">{exploit.title}</h3>
                <div className="flex gap-4 text-sm mb-3">
                  <span className="px-2 py-1 bg-red-900/30 text-red-400 rounded">
                    {exploit.type}
                  </span>
                  <span className="px-2 py-1 bg-gray-800 text-gray-400 rounded">
                    {exploit.platform}
                  </span>
                </div>
                <p className="text-gray-400 text-sm">Author: {exploit.author}</p>
                <p className="text-gray-500 text-sm">Date: {exploit.date}</p>
              </div>
            </motion.div>
          ))}
        </motion.div>
      )}
    </motion.div>
  )
}
